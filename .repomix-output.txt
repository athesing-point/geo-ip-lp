This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-27T19:07:54.794Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
local-docs/
  geo-ip-lp.md
.gitignore
client.js
package.json
README.md
worker.js
wrangler.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="local-docs/geo-ip-lp.md">
--- Repository Documentation ---

# Geo IP Landing Page Documentation

## Overview

This repository provides a simple geo-detection system. It uses Cloudflare Workers to dynamically update landing page content based on the visitor's location. The system consists of a Cloudflare Worker for location detection and a client-side JavaScript script for page updates.

## Quick Start

1. **Install Wrangler:**

   ```bash
   npm install -g wrangler
   ```

2. **Authenticate with Cloudflare:**

   ```bash
   wrangler login
   ```

3. **Install project dependencies:**

   ```bash
   npm install
   ```

4. **Deploy the worker:**

   ```bash
   wrangler deploy
   ```

   During first deployment, Wrangler will prompt you to set up a `*.workers.dev` subdomain if you haven't configured one.

5. **Integrate with your landing page:**
   - Copy the content of `client.js`
   - Paste it into your landing page's custom code section (e.g., in Webflow)
   - **Important:** Update `WORKER_URL` in `client.js` with your deployed worker URL (format: `https://<your-worker>.<your-subdomain>.workers.dev`)

## Development

1. **Start local development server:**

   ```bash
   wrangler dev
   ```

   This will start a local server at `localhost:8787` for testing your Worker.

2. **View logs from deployed Worker:**

   ```bash
   wrangler tail
   ```

   This command will start a session to livestream logs from your deployed Worker.

3. **Check deployment status:**
   ```bash
   wrangler deployments list
   ```
   View recent deployments and their status.

## Configuration

### Cloudflare Worker (`worker.js`)

- **`US_STATES` Array:** Defines US states and their corresponding average amounts. Customize this array to modify headlines and data for each state.
- **`generateHeadline(state)` Function:** Template for generating the main headline. Edit this function to change the headline structure.
- **`generateStateAvgHeadline(state)` Function:** Template for generating the average homeowner headline. Edit this function to change the average headline structure.
- **`STATE_HEADLINES` Constant:** Generated headlines for each state based on `generateHeadline`.
- **`STATE_AVG_HEADLINES` Constant:** Generated average homeowner headlines for each state based on `generateStateAvgHeadline`.
- **`fetch(request)` Function:**
  - Handles incoming requests to the worker.
  - Detects visitor location using Cloudflare's `request.cf` object.
  - Returns a JSON response containing:
    - `headline`: Location-specific headline (US states only).
    - `avgHeadline`: Location-specific average homeowner headline (US states only).
    - `country`: Visitor's country.
    - `region`: Visitor's region (state in the US).
    - `city`: Visitor's city.
    - `debug`: Debugging information.
  - Sets CORS headers to allow cross-origin requests.
  - Sets `Cache-Control` header for browser caching.

### Client-side Script (`client.js`)

- **`WORKER_URL` Variable:** **Required configuration.** Update this to the URL of your deployed Cloudflare Worker.
- **`HEADLINE_SELECTOR` Variable:** CSS selector for the HTML element to be updated with the main headline (default: `h1`).
- **`AVG_HOMEOWNER_SELECTOR` Variable:** CSS selector for the HTML element to be updated with the average homeowner headline (default: `#avg-homeowner`).
- **`AVG_HOMEOWNER_FOOTNOTE_SELECTOR` Variable:** CSS selector for the HTML element to be updated with footnote (currently unused in provided code).
- **`updateHeadline()` Function:**
  - Fetches geo data from the Cloudflare Worker at `WORKER_URL`.
  - Updates the HTML content of the elements selected by `HEADLINE_SELECTOR` and `AVG_HOMEOWNER_SELECTOR` with data received from the worker.
  - Logs debug information and handles potential errors during the fetch process.
- The script executes `updateHeadline()` when the DOM is fully loaded (`DOMContentLoaded` event).

### Wrangler Configuration (`wrangler.toml`)

- **`name`:** Defines the name of your Cloudflare Worker (`geo-ip-detector`).
- **`main`:** Specifies the main worker script file (`worker.js`).
- **`compatibility_date`:** Sets the compatibility date for Cloudflare Workers runtime features (`2024-01-01`).

## Dependencies

- **`wrangler`:** Cloudflare Workers CLI for development and deployment.
- **`cursor-tools`:** Development dependency, likely used for repository automation and documentation (based on `.cursorrules` file, but not directly required for the core Geo IP functionality).

## Customization

- **Headlines:** Modify the `generateHeadline` and `generateStateAvgHeadline` functions in `worker.js` to customize the generated headlines.
- **Target Elements:** Change `HEADLINE_SELECTOR`, `AVG_HOMEOWNER_SELECTOR` in `client.js` to target different HTML elements on your landing page.
- **State Data:** Update the `US_STATES` array in `worker.js` to adjust average amounts or add/modify states.
- **Extend Worker Logic:** Expand the `fetch` function in `worker.js` to include more complex logic or data processing based on location information.

--- End of Documentation ---
</file>

<file path=".gitignore">
node_modules/
.env
dist/
.wrangler/
worker-site/
coverage/
.DS_Store
*.log
</file>

<file path="client.js">
(() => {
  document.addEventListener("DOMContentLoaded", () => {
    const WORKER_URL = "https://geo-ip-detector.ops-1df.workers.dev/"; // Update this with your worker URL
    const HEADLINE_SELECTOR = "h1"; // Update this if you want to target a specific h1 with an ID or class
    const AVG_HOMEOWNER_SELECTOR = "#avg-homeowner"; // Selector for the avg-homeowner element
    const AVG_HOMEOWNER_FOOTNOTE_SELECTOR = "#footnote-rtf"; // Selector for the footnote-rtf element to update with avg amount details.
    async function updateHeadline() {
      try {
        const response = await fetch(WORKER_URL);
        if (!response.ok) throw new Error("Network response was not ok");
        const data = await response.json();
        console.log("Geo data received:", data); // Add logging for debugging
        console.log("Debug info:", data.debug); // Log the debug information
        // Only update if we have a US state headline
        if (data.headline) {
          const headlines = document.querySelectorAll(HEADLINE_SELECTOR);
          console.log("Found headlines:", headlines.length); // Log number of headlines found
          if (headlines.length > 0) {
            headlines[0].innerHTML = data.headline; // Use innerHTML since we're receiving HTML content
            console.log("Updated headline with:", data.headline); // Log the headline content
          } else {
            console.warn("No headlines found with selector:", HEADLINE_SELECTOR);
          }
        } else {
          console.log("No headline available for this location. Debug info:", {
            country: data.country,
            region: data.region,
            stateAbbr: data.stateAbbr,
            hasHeadline: !!data.headline,
          });
        }
        // Update avg-homeowner element if available
        if (data.avgHeadline) {
          const avgHomeowner = document.querySelector(AVG_HOMEOWNER_SELECTOR);
          if (avgHomeowner) {
            avgHomeowner.innerHTML = data.avgHeadline;
            console.log("Updated avg-homeowner with:", data.avgHeadline);
          } else {
            console.warn("No element found with selector:", AVG_HOMEOWNER_SELECTOR);
          }
        }
      } catch (error) {
        console.error("Error fetching geo data:", error);
      }
    }
    // Run immediately since we're already in DOMContentLoaded
    updateHeadline();
  });
})();
</file>

<file path="package.json">
{
  "name": "geo-ip-lp",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "wrangler dev",
    "deploy": "wrangler deploy"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "Geo IP detection for landing pages",
  "devDependencies": {
    "wrangler": "^4.4.0",
    "cursor-tools": "latest"
  }
}
</file>

<file path="README.md">
# Geo IP Landing Page

Simple geo-detection system using Cloudflare Workers to update landing page content based on visitor location.

## Files

- `worker.js` - Cloudflare Worker that detects location
- `client.js` - Client-side code to update the page (add to Webflow)

## Development

1. Install dependencies:

```bash
npm install
```

2. Start development server:

```bash
npm run dev
```

## Deployment

1. Deploy the worker:

```bash
npm run deploy
```

2. Copy `client.js` contents into your Webflow site's custom code section
3. Update the `WORKER_URL` in the pasted code to match your deployed worker URL

## Customization

- Edit headlines in `worker.js`
- Change target element in `client.js` by updating `HEADLINE_SELECTOR`
</file>

<file path="worker.js">
// List of US states with average amounts
const US_STATES = [
  { name: "Alabama", avgAmount: 80000 },
  { name: "Alaska", avgAmount: 95000 },
  { name: "Arizona", avgAmount: 110000 },
  { name: "Arkansas", avgAmount: 75000 },
  { name: "California", avgAmount: 175000 },
  { name: "Colorado", avgAmount: 120000 },
  { name: "Connecticut", avgAmount: 130000 },
  { name: "Delaware", avgAmount: 95000 },
  { name: "Florida", avgAmount: 140000 },
  { name: "Georgia", avgAmount: 110000 },
  { name: "Hawaii", avgAmount: 160000 },
  { name: "Idaho", avgAmount: 85000 },
  { name: "Illinois", avgAmount: 120000 },
  { name: "Indiana", avgAmount: 90000 },
  { name: "Iowa", avgAmount: 80000 },
  { name: "Kansas", avgAmount: 85000 },
  { name: "Kentucky", avgAmount: 75000 },
  { name: "Louisiana", avgAmount: 85000 },
  { name: "Maine", avgAmount: 95000 },
  { name: "Maryland", avgAmount: 130000 },
  { name: "Massachusetts", avgAmount: 150000 },
  { name: "Michigan", avgAmount: 100000 },
  { name: "Minnesota", avgAmount: 110000 },
  { name: "Mississippi", avgAmount: 70000 },
  { name: "Missouri", avgAmount: 90000 },
  { name: "Montana", avgAmount: 95000 },
  { name: "Nebraska", avgAmount: 85000 },
  { name: "Nevada", avgAmount: 115000 },
  { name: "New Hampshire", avgAmount: 110000 },
  { name: "New Jersey", avgAmount: 140000 },
  { name: "New Mexico", avgAmount: 90000 },
  { name: "New York", avgAmount: 160000 },
  { name: "North Carolina", avgAmount: 105000 },
  { name: "North Dakota", avgAmount: 80000 },
  { name: "Ohio", avgAmount: 95000 },
  { name: "Oklahoma", avgAmount: 80000 },
  { name: "Oregon", avgAmount: 120000 },
  { name: "Pennsylvania", avgAmount: 110000 },
  { name: "Rhode Island", avgAmount: 120000 },
  { name: "South Carolina", avgAmount: 95000 },
  { name: "South Dakota", avgAmount: 75000 },
  { name: "Tennessee", avgAmount: 100000 },
  { name: "Texas", avgAmount: 130000 },
  { name: "Utah", avgAmount: 110000 },
  { name: "Vermont", avgAmount: 100000 },
  { name: "Virginia", avgAmount: 125000 },
  { name: "Washington", avgAmount: 135000 },
  { name: "West Virginia", avgAmount: 70000 },
  { name: "Wisconsin", avgAmount: 95000 },
  { name: "Wyoming", avgAmount: 85000 },
];
// Template function for headlines
function generateHeadline(state) {
  return `Get up to $500k from your <br><span class="headline-underline-decoration">home equity</span> in ${state.name}.`;
}
function generateStateAvgHeadline(state) {
  return `Homeowners in ${state.name} love getting $${state.avgAmount.toLocaleString()} cash from Point's Home Equity Investment.`;
}
function addStateAvgFootnote(state) {
  return `*Average amount based on homeowners in ${state.name} who have used Point's Home Equity Investment.`;
}
// Generate headlines for all states
const STATE_HEADLINES = US_STATES.reduce((acc, state) => {
  acc[state.name] = generateHeadline(state);
  return acc;
}, {});
// Generate avg homeowner headlines for all states
const STATE_AVG_HEADLINES = US_STATES.reduce((acc, state) => {
  acc[state.name] = generateStateAvgHeadline(state);
  return acc;
}, {});
const STATE_AVG_FOOTNOTES = US_STATES.reduce((acc, state) => {
  acc[state.name] = addStateAvgFootnote(state);
  return acc;
}, {});
export default {
  async fetch(request) {
    // Handle CORS preflight
    if (request.method === "OPTIONS") {
      return new Response(null, {
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
          "Access-Control-Max-Age": "86400",
        },
      });
    }
    // Get geo information from the request
    const cf = request.cf;
    // Debug logging
    console.log("Debug info:", {
      originalRegion: cf?.region,
      hasStateHeadline: cf?.region ? !!STATE_HEADLINES[cf.region] : false,
      country: cf?.country,
    });
    const response = {
      // Only return a headline if it's a US state
      headline: cf?.country === "US" && cf?.region ? STATE_HEADLINES[cf.region] || null : null,
      avgHeadline: cf?.country === "US" && cf?.region ? STATE_AVG_HEADLINES[cf.region] || null : null,
      country: cf?.country || "Unknown",
      region: cf?.region || "Unknown",
      city: cf?.city || "Unknown",
      debug: {
        originalRegion: cf?.region,
        hasStateHeadline: cf?.region ? !!STATE_HEADLINES[cf.region] : false,
      },
    };
    return new Response(JSON.stringify(response), {
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
        "Cache-Control": "max-age=3600",
      },
    });
  },
};
</file>

<file path="wrangler.toml">
name = "geo-ip-detector"
main = "worker.js"
compatibility_date = "2024-01-01"
</file>

</files>
